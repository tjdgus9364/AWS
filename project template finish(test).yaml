AWSTemplateFormatVersion: 2010-09-09
Description: Project Template for TEST
Parameters:
  AmazonLinuxAMIID:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  VPCCIDR:
    Description: CIDR Block for VPC
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.5.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet1Param:
    Description: Public Subnet 1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.5.11.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet2Param:
    Description: Public Subnet 2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.5.12.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet3Param:
    Description: Public Subnet 3
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.5.51.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet4Param:
    Description: Public Subnet 4
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.5.52.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnet1Param:
    Description: Private Subnet 1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.5.53.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnet2Param:
    Description: Private Subnet 2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.5.54.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBInstanceID:
    Default: mydbinstance
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  ReplicaDBInstanceID:
    Default: replicaDBinstance
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: mydb
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.m6g.large
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB.
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  MultiAZDatabase:
    Default: 'false'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: VPC
          Value: NAT-and-CLI
        - Key: Name
          Value: Lab VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Param
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: ALB Subnet1(PB)
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Param
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: ALB Subnet2(PB)
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3Param
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: WEB Subnet1(PB)
  PublicSubnet4:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet4Param
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: WEB Subnet2(PB)
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Param
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: DB Subnet1(PV)
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Param
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: DB Subnet2(PV)
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - VPC
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PublicRouteTable
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
      - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
      - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet3
      - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet4RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet4
      - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet1
      - AttachGateway
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet2
      - AttachGateway
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private
  CommandHostSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group for Command Host
      GroupName: CommandHost-SG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: CommandHost-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  ALBSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group for Command Host
      GroupName: ALB-SG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ALB-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  WEBAccessSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP access to client(to ALB).
      GroupName: WEBAccess-SG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WEBAccess-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref CommandHostSG
  DBSG:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      Tags:
        - Key: "Name"
          Value: "DB-SG"
        - Key: "Security group name"
          Value: "DataBase Security group"    
      DBSecurityGroupIngress: 
        EC2SecurityGroupId: !Ref WEBAccessSG
      EC2VpcId: !Ref VPC
      GroupDescription: database Security Group

  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LabRootRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole
  CommandHost:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - RootInstanceProfile
      - PublicSubnet1
      - CommandHostSG
      - AttachGateway
    Properties:
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref RootInstanceProfile
      ImageId: !Ref AmazonLinuxAMIID
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref CommandHostSG
      Tags:
        - Key: Name
          Value: Command Host
  myDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: description
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: DBSubnetGroup
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      MultiAZ: !Ref MultiAZDatabase
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref myDBSubnetGroup
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: MariaDB
      EngineVersion: 10.4.13
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSecurityGroups: 
        - !Ref DBSG
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: myLaunchTemplate
      LaunchTemplateData: 
        ImageId: !Ref AmazonLinuxAMIID
        InstanceType: t2.micro
        Monitoring: 
          Enabled: true
        SecurityGroupIds: 
          - !Ref WEBAccessSG
        KeyName: !Ref KeyName
        UserData: !Base64 
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - |
                yum update -y --security
                yum -y install httpd libjpeg* libpng* freetype* gd-* gcc gcc-c++ gdbm-devel libtermcap-devel
                systemctl enable httpd
                sed -i "s/DirectoryIndex index.html/DirectoryIndex index.html index.php/g" /etc/httpd/conf/httpd.conf
                echo " " >> /etc/httpd/conf/httpd.conf
                echo "<VirtualHost *:80>" >> /etc/httpd/conf/httpd.conf
                echo "RewriteEngine On" >> /etc/httpd/conf/httpd.conf
                echo "RewriteCond %{HTTP:X-Forwarded-Proto} =http" >> /etc/httpd/conf/httpd.conf
                echo "RewriteRule .* https://%{HTTP:Host}%{REQUEST_URI} [L,R=permanent]" >> /etc/httpd/conf/httpd.conf
                echo "</VirtualHost>" >> /etc/httpd/conf/httpd.conf
                echo [MariaDB] > /etc/yum.repos.d/MariaDB.repo
                echo name = MariaDB >> /etc/yum.repos.d/MariaDB.repo
                echo baseurl = http://yum.mariadb.org/10.4.17/centos7-amd64 >> /etc/yum.repos.d/MariaDB.repo
                echo gpgkey = https://yum.mariadb.org/RPM-GPG-KEY-MariaDB >> /etc/yum.repos.d/MariaDB.repo
                echo gpgcheck = 1 >> /etc/yum.repos.d/MariaDB.repo
                yum -y install MariaDB-server MariaDB-client
                yum install -y php php-mysql php-mbstring php-pdo php-gd
                sed -i "s/short_open_tag = Off/short_open_tag = On/g" /etc/php.ini
                cd /var/www/html
                wget https://pro-bucket777.s3-us-west-2.amazonaws.com/project.zip
                unzip project.zip
                systemctl enable mariadb
                sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config
                init 6
              - |+

  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: myASG
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: "1"
      HealthCheckGracePeriod: 180
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnet3
        - !Ref PublicSubnet4
      MetricsCollection: 
        - Granularity: "1Minute"
          Metrics: 
            - "GroupMinSize"
            - "GroupMaxSize"
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Environment
          Value: Production
          PropagateAtLaunch: "true"
        - Key: Purpose
          Value: WebServerGroup
          PropagateAtLaunch: "false"
        - Key: Name
          Value: WebServer
          PropagateAtLaunch: "true"
  myCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref myASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 40
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: ipv4
      Name: ALB
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ALBSG
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: ALB-TG
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC